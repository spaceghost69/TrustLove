// tslint:disable
/**
 * JamRoom API
 * The JamRoom API
 *
 * The version of the OpenAPI document: 0.9.26
 * Contact: info@jamroom.pro
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    SpatialAudioEvent,
    SpatialAudioEventFromJSON,
    SpatialAudioEventToJSON,
} from '../model';

export interface SpatialAudioEventIdDeleteRequest {
    id: string;
}

export interface SpatialAudioEventIdGetRequest {
    id: string;
}

export interface SpatialAudioEventIdPutRequest {
    id: string;
    spatialAudioEvent: SpatialAudioEvent;
}

export interface SpatialAudioEventPostRequest {
    spatialAudioEvent: SpatialAudioEvent;
}


/**
 * Retrieves a list of SpatialAudioEvents.
 * Retrieve a list of SpatialAudioEvents
 */
function spatialAudioEventGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<SpatialAudioEvent>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SpatialAudioEvent`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(SpatialAudioEventFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of SpatialAudioEvents.
* Retrieve a list of SpatialAudioEvents
*/
export function spatialAudioEventGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<SpatialAudioEvent>>): QueryConfig<T> {
    return spatialAudioEventGetRaw( requestConfig);
}

/**
 * Deletes a specific SpatialAudioEvent.
 * Delete a SpatialAudioEvent.
 */
function spatialAudioEventIdDeleteRaw<T>(requestParameters: SpatialAudioEventIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling spatialAudioEventIdDelete.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SpatialAudioEvent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific SpatialAudioEvent.
* Delete a SpatialAudioEvent.
*/
export function spatialAudioEventIdDelete<T>(requestParameters: SpatialAudioEventIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return spatialAudioEventIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a SpatialAudioEvent for a specific uid.
 * Retrieve a SpatialAudioEvent
 */
function spatialAudioEventIdGetRaw<T>(requestParameters: SpatialAudioEventIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, SpatialAudioEvent> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling spatialAudioEventIdGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SpatialAudioEvent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SpatialAudioEventFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a SpatialAudioEvent for a specific uid.
* Retrieve a SpatialAudioEvent
*/
export function spatialAudioEventIdGet<T>(requestParameters: SpatialAudioEventIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, SpatialAudioEvent>): QueryConfig<T> {
    return spatialAudioEventIdGetRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing SpatialAudioEvent.
 * Update an existing SpatialAudioEvent
 */
function spatialAudioEventIdPutRaw<T>(requestParameters: SpatialAudioEventIdPutRequest, requestConfig: runtime.TypedQueryConfig<T, SpatialAudioEvent> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling spatialAudioEventIdPut.');
    }

    if (requestParameters.spatialAudioEvent === null || requestParameters.spatialAudioEvent === undefined) {
        throw new runtime.RequiredError('spatialAudioEvent','Required parameter requestParameters.spatialAudioEvent was null or undefined when calling spatialAudioEventIdPut.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SpatialAudioEvent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || SpatialAudioEventToJSON(requestParameters.spatialAudioEvent),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SpatialAudioEventFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing SpatialAudioEvent.
* Update an existing SpatialAudioEvent
*/
export function spatialAudioEventIdPut<T>(requestParameters: SpatialAudioEventIdPutRequest, requestConfig?: runtime.TypedQueryConfig<T, SpatialAudioEvent>): QueryConfig<T> {
    return spatialAudioEventIdPutRaw(requestParameters, requestConfig);
}

/**
 * Creates a new SpatialAudioEvent.
 * Create a new SpatialAudioEvent
 */
function spatialAudioEventPostRaw<T>(requestParameters: SpatialAudioEventPostRequest, requestConfig: runtime.TypedQueryConfig<T, SpatialAudioEvent> = {}): QueryConfig<T> {
    if (requestParameters.spatialAudioEvent === null || requestParameters.spatialAudioEvent === undefined) {
        throw new runtime.RequiredError('spatialAudioEvent','Required parameter requestParameters.spatialAudioEvent was null or undefined when calling spatialAudioEventPost.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/SpatialAudioEvent`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || SpatialAudioEventToJSON(requestParameters.spatialAudioEvent),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(SpatialAudioEventFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new SpatialAudioEvent.
* Create a new SpatialAudioEvent
*/
export function spatialAudioEventPost<T>(requestParameters: SpatialAudioEventPostRequest, requestConfig?: runtime.TypedQueryConfig<T, SpatialAudioEvent>): QueryConfig<T> {
    return spatialAudioEventPostRaw(requestParameters, requestConfig);
}

