// tslint:disable
/**
 * JamRoom API
 * The JamRoom API
 *
 * The version of the OpenAPI document: 0.9.26
 * Contact: info@jamroom.pro
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    ThorUXMeta,
    ThorUXMetaFromJSON,
    ThorUXMetaToJSON,
} from '../model';

export interface ThorUXMetaIdDeleteRequest {
    id: string;
}

export interface ThorUXMetaIdGetRequest {
    id: string;
}

export interface ThorUXMetaIdPutRequest {
    id: string;
    thorUXMeta: ThorUXMeta;
}

export interface ThorUXMetaPostRequest {
    thorUXMeta: ThorUXMeta;
}


/**
 * Retrieves a list of ThorUXMetas.
 * Retrieve a list of ThorUXMetas
 */
function thorUXMetaGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<ThorUXMeta>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXMeta`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ThorUXMetaFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of ThorUXMetas.
* Retrieve a list of ThorUXMetas
*/
export function thorUXMetaGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<ThorUXMeta>>): QueryConfig<T> {
    return thorUXMetaGetRaw( requestConfig);
}

/**
 * Deletes a specific ThorUXMeta.
 * Delete a ThorUXMeta.
 */
function thorUXMetaIdDeleteRaw<T>(requestParameters: ThorUXMetaIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling thorUXMetaIdDelete.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXMeta/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific ThorUXMeta.
* Delete a ThorUXMeta.
*/
export function thorUXMetaIdDelete<T>(requestParameters: ThorUXMetaIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return thorUXMetaIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a ThorUXMeta for a specific uid.
 * Retrieve a ThorUXMeta
 */
function thorUXMetaIdGetRaw<T>(requestParameters: ThorUXMetaIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, ThorUXMeta> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling thorUXMetaIdGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXMeta/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ThorUXMetaFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a ThorUXMeta for a specific uid.
* Retrieve a ThorUXMeta
*/
export function thorUXMetaIdGet<T>(requestParameters: ThorUXMetaIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, ThorUXMeta>): QueryConfig<T> {
    return thorUXMetaIdGetRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing ThorUXMeta.
 * Update an existing ThorUXMeta
 */
function thorUXMetaIdPutRaw<T>(requestParameters: ThorUXMetaIdPutRequest, requestConfig: runtime.TypedQueryConfig<T, ThorUXMeta> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling thorUXMetaIdPut.');
    }

    if (requestParameters.thorUXMeta === null || requestParameters.thorUXMeta === undefined) {
        throw new runtime.RequiredError('thorUXMeta','Required parameter requestParameters.thorUXMeta was null or undefined when calling thorUXMetaIdPut.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXMeta/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || ThorUXMetaToJSON(requestParameters.thorUXMeta),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ThorUXMetaFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing ThorUXMeta.
* Update an existing ThorUXMeta
*/
export function thorUXMetaIdPut<T>(requestParameters: ThorUXMetaIdPutRequest, requestConfig?: runtime.TypedQueryConfig<T, ThorUXMeta>): QueryConfig<T> {
    return thorUXMetaIdPutRaw(requestParameters, requestConfig);
}

/**
 * Creates a new ThorUXMeta.
 * Create a new ThorUXMeta
 */
function thorUXMetaPostRaw<T>(requestParameters: ThorUXMetaPostRequest, requestConfig: runtime.TypedQueryConfig<T, ThorUXMeta> = {}): QueryConfig<T> {
    if (requestParameters.thorUXMeta === null || requestParameters.thorUXMeta === undefined) {
        throw new runtime.RequiredError('thorUXMeta','Required parameter requestParameters.thorUXMeta was null or undefined when calling thorUXMetaPost.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXMeta`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ThorUXMetaToJSON(requestParameters.thorUXMeta),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ThorUXMetaFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new ThorUXMeta.
* Create a new ThorUXMeta
*/
export function thorUXMetaPost<T>(requestParameters: ThorUXMetaPostRequest, requestConfig?: runtime.TypedQueryConfig<T, ThorUXMeta>): QueryConfig<T> {
    return thorUXMetaPostRaw(requestParameters, requestConfig);
}

