// tslint:disable
/**
 * JamRoom API
 * The JamRoom API
 *
 * The version of the OpenAPI document: 0.9.26
 * Contact: info@jamroom.pro
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    ThorUXComponent,
    ThorUXComponentFromJSON,
    ThorUXComponentToJSON,
} from '../model';

export interface ThorUXComponentIdDeleteRequest {
    id: string;
}

export interface ThorUXComponentIdGetRequest {
    id: string;
}

export interface ThorUXComponentIdPutRequest {
    id: string;
    thorUXComponent: ThorUXComponent;
}

export interface ThorUXComponentPostRequest {
    thorUXComponent: ThorUXComponent;
}


/**
 * Retrieves a list of ThorUXComponents.
 * Retrieve a list of ThorUXComponents
 */
function thorUXComponentGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<ThorUXComponent>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXComponent`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(ThorUXComponentFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of ThorUXComponents.
* Retrieve a list of ThorUXComponents
*/
export function thorUXComponentGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<ThorUXComponent>>): QueryConfig<T> {
    return thorUXComponentGetRaw( requestConfig);
}

/**
 * Deletes a specific ThorUXComponent.
 * Delete a ThorUXComponent.
 */
function thorUXComponentIdDeleteRaw<T>(requestParameters: ThorUXComponentIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling thorUXComponentIdDelete.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXComponent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific ThorUXComponent.
* Delete a ThorUXComponent.
*/
export function thorUXComponentIdDelete<T>(requestParameters: ThorUXComponentIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return thorUXComponentIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a ThorUXComponent for a specific uid.
 * Retrieve a ThorUXComponent
 */
function thorUXComponentIdGetRaw<T>(requestParameters: ThorUXComponentIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, ThorUXComponent> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling thorUXComponentIdGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXComponent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ThorUXComponentFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a ThorUXComponent for a specific uid.
* Retrieve a ThorUXComponent
*/
export function thorUXComponentIdGet<T>(requestParameters: ThorUXComponentIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, ThorUXComponent>): QueryConfig<T> {
    return thorUXComponentIdGetRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing ThorUXComponent.
 * Update an existing ThorUXComponent
 */
function thorUXComponentIdPutRaw<T>(requestParameters: ThorUXComponentIdPutRequest, requestConfig: runtime.TypedQueryConfig<T, ThorUXComponent> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling thorUXComponentIdPut.');
    }

    if (requestParameters.thorUXComponent === null || requestParameters.thorUXComponent === undefined) {
        throw new runtime.RequiredError('thorUXComponent','Required parameter requestParameters.thorUXComponent was null or undefined when calling thorUXComponentIdPut.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXComponent/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || ThorUXComponentToJSON(requestParameters.thorUXComponent),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ThorUXComponentFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing ThorUXComponent.
* Update an existing ThorUXComponent
*/
export function thorUXComponentIdPut<T>(requestParameters: ThorUXComponentIdPutRequest, requestConfig?: runtime.TypedQueryConfig<T, ThorUXComponent>): QueryConfig<T> {
    return thorUXComponentIdPutRaw(requestParameters, requestConfig);
}

/**
 * Creates a new ThorUXComponent.
 * Create a new ThorUXComponent
 */
function thorUXComponentPostRaw<T>(requestParameters: ThorUXComponentPostRequest, requestConfig: runtime.TypedQueryConfig<T, ThorUXComponent> = {}): QueryConfig<T> {
    if (requestParameters.thorUXComponent === null || requestParameters.thorUXComponent === undefined) {
        throw new runtime.RequiredError('thorUXComponent','Required parameter requestParameters.thorUXComponent was null or undefined when calling thorUXComponentPost.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/ThorUXComponent`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || ThorUXComponentToJSON(requestParameters.thorUXComponent),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(ThorUXComponentFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new ThorUXComponent.
* Create a new ThorUXComponent
*/
export function thorUXComponentPost<T>(requestParameters: ThorUXComponentPostRequest, requestConfig?: runtime.TypedQueryConfig<T, ThorUXComponent>): QueryConfig<T> {
    return thorUXComponentPostRaw(requestParameters, requestConfig);
}

