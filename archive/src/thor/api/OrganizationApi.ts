// tslint:disable
/**
 * JamRoom API
 * The JamRoom API
 *
 * The version of the OpenAPI document: 0.9.26
 * Contact: info@jamroom.pro
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Organization,
    OrganizationFromJSON,
    OrganizationToJSON,
} from '../model';

export interface OrganizationIdDeleteRequest {
    id: string;
}

export interface OrganizationIdGetRequest {
    id: string;
}

export interface OrganizationIdPutRequest {
    id: string;
    organization: Organization;
}

export interface OrganizationPostRequest {
    organization: Organization;
}


/**
 * Retrieves a list of Organizations.
 * Retrieve a list of Organizations
 */
function organizationGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Organization>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Organization`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(OrganizationFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Organizations.
* Retrieve a list of Organizations
*/
export function organizationGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Organization>>): QueryConfig<T> {
    return organizationGetRaw( requestConfig);
}

/**
 * Deletes a specific Organization.
 * Delete a Organization.
 */
function organizationIdDeleteRaw<T>(requestParameters: OrganizationIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationIdDelete.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Organization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Organization.
* Delete a Organization.
*/
export function organizationIdDelete<T>(requestParameters: OrganizationIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return organizationIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a Organization for a specific uid.
 * Retrieve a Organization
 */
function organizationIdGetRaw<T>(requestParameters: OrganizationIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, Organization> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationIdGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Organization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OrganizationFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a Organization for a specific uid.
* Retrieve a Organization
*/
export function organizationIdGet<T>(requestParameters: OrganizationIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Organization>): QueryConfig<T> {
    return organizationIdGetRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Organization.
 * Update an existing Organization
 */
function organizationIdPutRaw<T>(requestParameters: OrganizationIdPutRequest, requestConfig: runtime.TypedQueryConfig<T, Organization> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling organizationIdPut.');
    }

    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling organizationIdPut.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Organization/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || OrganizationToJSON(requestParameters.organization),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OrganizationFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Organization.
* Update an existing Organization
*/
export function organizationIdPut<T>(requestParameters: OrganizationIdPutRequest, requestConfig?: runtime.TypedQueryConfig<T, Organization>): QueryConfig<T> {
    return organizationIdPutRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Organization.
 * Create a new Organization
 */
function organizationPostRaw<T>(requestParameters: OrganizationPostRequest, requestConfig: runtime.TypedQueryConfig<T, Organization> = {}): QueryConfig<T> {
    if (requestParameters.organization === null || requestParameters.organization === undefined) {
        throw new runtime.RequiredError('organization','Required parameter requestParameters.organization was null or undefined when calling organizationPost.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Organization`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || OrganizationToJSON(requestParameters.organization),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(OrganizationFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Organization.
* Create a new Organization
*/
export function organizationPost<T>(requestParameters: OrganizationPostRequest, requestConfig?: runtime.TypedQueryConfig<T, Organization>): QueryConfig<T> {
    return organizationPostRaw(requestParameters, requestConfig);
}

