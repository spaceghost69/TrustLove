// tslint:disable
/**
 * JamRoom API
 * The JamRoom API
 *
 * The version of the OpenAPI document: 0.9.26
 * Contact: info@jamroom.pro
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    User,
    UserFromJSON,
    UserToJSON,
} from '../model';

export interface UserIdDeleteRequest {
    id: string;
}

export interface UserIdGetRequest {
    id: string;
}

export interface UserIdPutRequest {
    id: string;
    user: User;
}

export interface UserPostRequest {
    user: User;
}


/**
 * Retrieves a list of Users.
 * Retrieve a list of Users
 */
function userGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<User>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/User`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(UserFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Users.
* Retrieve a list of Users
*/
export function userGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<User>>): QueryConfig<T> {
    return userGetRaw( requestConfig);
}

/**
 * Deletes a specific User.
 * Delete a User.
 */
function userIdDeleteRaw<T>(requestParameters: UserIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userIdDelete.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/User/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific User.
* Delete a User.
*/
export function userIdDelete<T>(requestParameters: UserIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return userIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a User for a specific uid.
 * Retrieve a User
 */
function userIdGetRaw<T>(requestParameters: UserIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, User> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userIdGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/User/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a User for a specific uid.
* Retrieve a User
*/
export function userIdGet<T>(requestParameters: UserIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, User>): QueryConfig<T> {
    return userIdGetRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing User.
 * Update an existing User
 */
function userIdPutRaw<T>(requestParameters: UserIdPutRequest, requestConfig: runtime.TypedQueryConfig<T, User> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling userIdPut.');
    }

    if (requestParameters.user === null || requestParameters.user === undefined) {
        throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling userIdPut.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/User/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || UserToJSON(requestParameters.user),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing User.
* Update an existing User
*/
export function userIdPut<T>(requestParameters: UserIdPutRequest, requestConfig?: runtime.TypedQueryConfig<T, User>): QueryConfig<T> {
    return userIdPutRaw(requestParameters, requestConfig);
}

/**
 * Creates a new User.
 * Create a new User
 */
function userPostRaw<T>(requestParameters: UserPostRequest, requestConfig: runtime.TypedQueryConfig<T, User> = {}): QueryConfig<T> {
    if (requestParameters.user === null || requestParameters.user === undefined) {
        throw new runtime.RequiredError('user','Required parameter requestParameters.user was null or undefined when calling userPost.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/User`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || UserToJSON(requestParameters.user),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(UserFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new User.
* Create a new User
*/
export function userPost<T>(requestParameters: UserPostRequest, requestConfig?: runtime.TypedQueryConfig<T, User>): QueryConfig<T> {
    return userPostRaw(requestParameters, requestConfig);
}

