// tslint:disable
/**
 * JamRoom API
 * The JamRoom API
 *
 * The version of the OpenAPI document: 0.9.26
 * Contact: info@jamroom.pro
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    TrackSetting,
    TrackSettingFromJSON,
    TrackSettingToJSON,
} from '../model';

export interface TrackSettingIdDeleteRequest {
    id: string;
}

export interface TrackSettingIdGetRequest {
    id: string;
}

export interface TrackSettingIdPutRequest {
    id: string;
    trackSetting: TrackSetting;
}

export interface TrackSettingPostRequest {
    trackSetting: TrackSetting;
}


/**
 * Retrieves a list of TrackSettings.
 * Retrieve a list of TrackSettings
 */
function trackSettingGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<TrackSetting>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/TrackSetting`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(TrackSettingFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of TrackSettings.
* Retrieve a list of TrackSettings
*/
export function trackSettingGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<TrackSetting>>): QueryConfig<T> {
    return trackSettingGetRaw( requestConfig);
}

/**
 * Deletes a specific TrackSetting.
 * Delete a TrackSetting.
 */
function trackSettingIdDeleteRaw<T>(requestParameters: TrackSettingIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackSettingIdDelete.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/TrackSetting/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific TrackSetting.
* Delete a TrackSetting.
*/
export function trackSettingIdDelete<T>(requestParameters: TrackSettingIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return trackSettingIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a TrackSetting for a specific uid.
 * Retrieve a TrackSetting
 */
function trackSettingIdGetRaw<T>(requestParameters: TrackSettingIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, TrackSetting> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackSettingIdGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/TrackSetting/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TrackSettingFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a TrackSetting for a specific uid.
* Retrieve a TrackSetting
*/
export function trackSettingIdGet<T>(requestParameters: TrackSettingIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, TrackSetting>): QueryConfig<T> {
    return trackSettingIdGetRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing TrackSetting.
 * Update an existing TrackSetting
 */
function trackSettingIdPutRaw<T>(requestParameters: TrackSettingIdPutRequest, requestConfig: runtime.TypedQueryConfig<T, TrackSetting> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackSettingIdPut.');
    }

    if (requestParameters.trackSetting === null || requestParameters.trackSetting === undefined) {
        throw new runtime.RequiredError('trackSetting','Required parameter requestParameters.trackSetting was null or undefined when calling trackSettingIdPut.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/TrackSetting/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || TrackSettingToJSON(requestParameters.trackSetting),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TrackSettingFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing TrackSetting.
* Update an existing TrackSetting
*/
export function trackSettingIdPut<T>(requestParameters: TrackSettingIdPutRequest, requestConfig?: runtime.TypedQueryConfig<T, TrackSetting>): QueryConfig<T> {
    return trackSettingIdPutRaw(requestParameters, requestConfig);
}

/**
 * Creates a new TrackSetting.
 * Create a new TrackSetting
 */
function trackSettingPostRaw<T>(requestParameters: TrackSettingPostRequest, requestConfig: runtime.TypedQueryConfig<T, TrackSetting> = {}): QueryConfig<T> {
    if (requestParameters.trackSetting === null || requestParameters.trackSetting === undefined) {
        throw new runtime.RequiredError('trackSetting','Required parameter requestParameters.trackSetting was null or undefined when calling trackSettingPost.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/TrackSetting`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || TrackSettingToJSON(requestParameters.trackSetting),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TrackSettingFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new TrackSetting.
* Create a new TrackSetting
*/
export function trackSettingPost<T>(requestParameters: TrackSettingPostRequest, requestConfig?: runtime.TypedQueryConfig<T, TrackSetting>): QueryConfig<T> {
    return trackSettingPostRaw(requestParameters, requestConfig);
}

