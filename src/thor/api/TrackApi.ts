// tslint:disable
/**
 * JamRoom API
 * The JamRoom API
 *
 * The version of the OpenAPI document: 0.9.26
 * Contact: info@jamroom.pro
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Track,
    TrackFromJSON,
    TrackToJSON,
} from '../model';

export interface TrackIdDeleteRequest {
    id: string;
}

export interface TrackIdGetRequest {
    id: string;
}

export interface TrackIdPutRequest {
    id: string;
    track: Track;
}

export interface TrackPostRequest {
    track: Track;
}


/**
 * Retrieves a list of Tracks.
 * Retrieve a list of Tracks
 */
function trackGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Track>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Track`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(TrackFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Tracks.
* Retrieve a list of Tracks
*/
export function trackGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Track>>): QueryConfig<T> {
    return trackGetRaw( requestConfig);
}

/**
 * Deletes a specific Track.
 * Delete a Track.
 */
function trackIdDeleteRaw<T>(requestParameters: TrackIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackIdDelete.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Track/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Track.
* Delete a Track.
*/
export function trackIdDelete<T>(requestParameters: TrackIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return trackIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a Track for a specific uid.
 * Retrieve a Track
 */
function trackIdGetRaw<T>(requestParameters: TrackIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, Track> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackIdGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Track/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TrackFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a Track for a specific uid.
* Retrieve a Track
*/
export function trackIdGet<T>(requestParameters: TrackIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Track>): QueryConfig<T> {
    return trackIdGetRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Track.
 * Update an existing Track
 */
function trackIdPutRaw<T>(requestParameters: TrackIdPutRequest, requestConfig: runtime.TypedQueryConfig<T, Track> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling trackIdPut.');
    }

    if (requestParameters.track === null || requestParameters.track === undefined) {
        throw new runtime.RequiredError('track','Required parameter requestParameters.track was null or undefined when calling trackIdPut.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Track/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || TrackToJSON(requestParameters.track),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TrackFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Track.
* Update an existing Track
*/
export function trackIdPut<T>(requestParameters: TrackIdPutRequest, requestConfig?: runtime.TypedQueryConfig<T, Track>): QueryConfig<T> {
    return trackIdPutRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Track.
 * Create a new Track
 */
function trackPostRaw<T>(requestParameters: TrackPostRequest, requestConfig: runtime.TypedQueryConfig<T, Track> = {}): QueryConfig<T> {
    if (requestParameters.track === null || requestParameters.track === undefined) {
        throw new runtime.RequiredError('track','Required parameter requestParameters.track was null or undefined when calling trackPost.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Track`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || TrackToJSON(requestParameters.track),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(TrackFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Track.
* Create a new Track
*/
export function trackPost<T>(requestParameters: TrackPostRequest, requestConfig?: runtime.TypedQueryConfig<T, Track>): QueryConfig<T> {
    return trackPostRaw(requestParameters, requestConfig);
}

