// tslint:disable
/**
 * JamRoom API
 * The JamRoom API
 *
 * The version of the OpenAPI document: 0.9.26
 * Contact: info@jamroom.pro
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    Address,
    AddressFromJSON,
    AddressToJSON,
} from '../model';

export interface AddressIdDeleteRequest {
    id: string;
}

export interface AddressIdGetRequest {
    id: string;
}

export interface AddressIdPutRequest {
    id: string;
    address: Address;
}

export interface AddressPostRequest {
    address: Address;
}


/**
 * Retrieves a list of Addresss.
 * Retrieve a list of Addresss
 */
function addressGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<Address>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Address`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(AddressFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of Addresss.
* Retrieve a list of Addresss
*/
export function addressGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<Address>>): QueryConfig<T> {
    return addressGetRaw( requestConfig);
}

/**
 * Deletes a specific Address.
 * Delete a Address.
 */
function addressIdDeleteRaw<T>(requestParameters: AddressIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addressIdDelete.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific Address.
* Delete a Address.
*/
export function addressIdDelete<T>(requestParameters: AddressIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return addressIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a Address for a specific uid.
 * Retrieve a Address
 */
function addressIdGetRaw<T>(requestParameters: AddressIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, Address> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addressIdGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AddressFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a Address for a specific uid.
* Retrieve a Address
*/
export function addressIdGet<T>(requestParameters: AddressIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, Address>): QueryConfig<T> {
    return addressIdGetRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing Address.
 * Update an existing Address
 */
function addressIdPutRaw<T>(requestParameters: AddressIdPutRequest, requestConfig: runtime.TypedQueryConfig<T, Address> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling addressIdPut.');
    }

    if (requestParameters.address === null || requestParameters.address === undefined) {
        throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling addressIdPut.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Address/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || AddressToJSON(requestParameters.address),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AddressFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing Address.
* Update an existing Address
*/
export function addressIdPut<T>(requestParameters: AddressIdPutRequest, requestConfig?: runtime.TypedQueryConfig<T, Address>): QueryConfig<T> {
    return addressIdPutRaw(requestParameters, requestConfig);
}

/**
 * Creates a new Address.
 * Create a new Address
 */
function addressPostRaw<T>(requestParameters: AddressPostRequest, requestConfig: runtime.TypedQueryConfig<T, Address> = {}): QueryConfig<T> {
    if (requestParameters.address === null || requestParameters.address === undefined) {
        throw new runtime.RequiredError('address','Required parameter requestParameters.address was null or undefined when calling addressPost.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/Address`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || AddressToJSON(requestParameters.address),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(AddressFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new Address.
* Create a new Address
*/
export function addressPost<T>(requestParameters: AddressPostRequest, requestConfig?: runtime.TypedQueryConfig<T, Address>): QueryConfig<T> {
    return addressPostRaw(requestParameters, requestConfig);
}

