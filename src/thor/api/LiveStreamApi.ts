// tslint:disable
/**
 * JamRoom API
 * The JamRoom API
 *
 * The version of the OpenAPI document: 0.9.26
 * Contact: info@jamroom.pro
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { HttpMethods, QueryConfig, ResponseBody, ResponseText } from 'redux-query';
import * as runtime from '../src/runtime';
import {
    LiveStream,
    LiveStreamFromJSON,
    LiveStreamToJSON,
} from '../model';

export interface LiveStreamIdDeleteRequest {
    id: string;
}

export interface LiveStreamIdGetRequest {
    id: string;
}

export interface LiveStreamIdPutRequest {
    id: string;
    liveStream: LiveStream;
}

export interface LiveStreamPostRequest {
    liveStream: LiveStream;
}


/**
 * Retrieves a list of LiveStreams.
 * Retrieve a list of LiveStreams
 */
function liveStreamGetRaw<T>( requestConfig: runtime.TypedQueryConfig<T, Array<LiveStream>> = {}): QueryConfig<T> {
    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LiveStream`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(body.map(LiveStreamFromJSON), text);
    }

    return config;
}

/**
* Retrieves a list of LiveStreams.
* Retrieve a list of LiveStreams
*/
export function liveStreamGet<T>( requestConfig?: runtime.TypedQueryConfig<T, Array<LiveStream>>): QueryConfig<T> {
    return liveStreamGetRaw( requestConfig);
}

/**
 * Deletes a specific LiveStream.
 * Delete a LiveStream.
 */
function liveStreamIdDeleteRaw<T>(requestParameters: LiveStreamIdDeleteRequest, requestConfig: runtime.TypedQueryConfig<T, void> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling liveStreamIdDelete.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LiveStream/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'DELETE',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
    }

    return config;
}

/**
* Deletes a specific LiveStream.
* Delete a LiveStream.
*/
export function liveStreamIdDelete<T>(requestParameters: LiveStreamIdDeleteRequest, requestConfig?: runtime.TypedQueryConfig<T, void>): QueryConfig<T> {
    return liveStreamIdDeleteRaw(requestParameters, requestConfig);
}

/**
 * Retrieves a LiveStream for a specific uid.
 * Retrieve a LiveStream
 */
function liveStreamIdGetRaw<T>(requestParameters: LiveStreamIdGetRequest, requestConfig: runtime.TypedQueryConfig<T, LiveStream> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling liveStreamIdGet.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LiveStream/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'GET',
            headers: headerParameters,
        },
        body: queryParameters,
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LiveStreamFromJSON(body), text);
    }

    return config;
}

/**
* Retrieves a LiveStream for a specific uid.
* Retrieve a LiveStream
*/
export function liveStreamIdGet<T>(requestParameters: LiveStreamIdGetRequest, requestConfig?: runtime.TypedQueryConfig<T, LiveStream>): QueryConfig<T> {
    return liveStreamIdGetRaw(requestParameters, requestConfig);
}

/**
 * Updates an existing LiveStream.
 * Update an existing LiveStream
 */
function liveStreamIdPutRaw<T>(requestParameters: LiveStreamIdPutRequest, requestConfig: runtime.TypedQueryConfig<T, LiveStream> = {}): QueryConfig<T> {
    if (requestParameters.id === null || requestParameters.id === undefined) {
        throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling liveStreamIdPut.');
    }

    if (requestParameters.liveStream === null || requestParameters.liveStream === undefined) {
        throw new runtime.RequiredError('liveStream','Required parameter requestParameters.liveStream was null or undefined when calling liveStreamIdPut.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LiveStream/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'PUT',
            headers: headerParameters,
        },
        body: queryParameters || LiveStreamToJSON(requestParameters.liveStream),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LiveStreamFromJSON(body), text);
    }

    return config;
}

/**
* Updates an existing LiveStream.
* Update an existing LiveStream
*/
export function liveStreamIdPut<T>(requestParameters: LiveStreamIdPutRequest, requestConfig?: runtime.TypedQueryConfig<T, LiveStream>): QueryConfig<T> {
    return liveStreamIdPutRaw(requestParameters, requestConfig);
}

/**
 * Creates a new LiveStream.
 * Create a new LiveStream
 */
function liveStreamPostRaw<T>(requestParameters: LiveStreamPostRequest, requestConfig: runtime.TypedQueryConfig<T, LiveStream> = {}): QueryConfig<T> {
    if (requestParameters.liveStream === null || requestParameters.liveStream === undefined) {
        throw new runtime.RequiredError('liveStream','Required parameter requestParameters.liveStream was null or undefined when calling liveStreamPost.');
    }

    let queryParameters = null;


    const headerParameters : runtime.HttpHeaders = {};

    headerParameters['Content-Type'] = 'application/json';


    const { meta = {} } = requestConfig;

    const config: QueryConfig<T> = {
        url: `${runtime.Configuration.basePath}/LiveStream`,
        meta,
        update: requestConfig.update,
        queryKey: requestConfig.queryKey,
        optimisticUpdate: requestConfig.optimisticUpdate,
        force: requestConfig.force,
        rollback: requestConfig.rollback,
        options: {
            method: 'POST',
            headers: headerParameters,
        },
        body: queryParameters || LiveStreamToJSON(requestParameters.liveStream),
    };

    const { transform: requestTransform } = requestConfig;
    if (requestTransform) {
        config.transform = (body: ResponseBody, text: ResponseBody) => requestTransform(LiveStreamFromJSON(body), text);
    }

    return config;
}

/**
* Creates a new LiveStream.
* Create a new LiveStream
*/
export function liveStreamPost<T>(requestParameters: LiveStreamPostRequest, requestConfig?: runtime.TypedQueryConfig<T, LiveStream>): QueryConfig<T> {
    return liveStreamPostRaw(requestParameters, requestConfig);
}

