// tslint:disable
/**
 * JamRoom API
 * The JamRoom API
 *
 * The version of the OpenAPI document: 0.9.26
 * Contact: info@jamroom.pro
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../src/runtime';

// thorapi

/**
 * 
 * @export
 * @interface Authority
 */
export type Authority  = {
    /**
     * 
     * @type {string}
     * @memberof Authority
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof Authority
     */
    authority: string;
    /**
     * 
     * @type {string}
     * @memberof Authority
     */
    userId?: string;
    /**
     * Unique identifier for object in the system
     * @type {string}
     * @memberof Authority
     */
    id?: string;
    /**
     * Unique identifier for owner of the object in the system
     * @type {string}
     * @memberof Authority
     */
    ownerId?: string;
    /**
     * Date of object creation
     * @type {Date}
     * @memberof Authority
     */
    createdDate?: Date;
    /**
     * Date of object modification
     * @type {Date}
     * @memberof Authority
     */
    modifiedDate?: Date;
}

export function AuthorityFromJSON(json: any): Authority {
    return {
        'username': json['username'],
        'authority': json['authority'],
        'userId': !exists(json, 'userId') ? undefined : json['userId'],
        'id': !exists(json, 'id') ? undefined : json['id'],
        'ownerId': !exists(json, 'ownerId') ? undefined : json['ownerId'],
        'createdDate': !exists(json, 'createdDate') ? undefined : new Date(json['createdDate']),
        'modifiedDate': !exists(json, 'modifiedDate') ? undefined : new Date(json['modifiedDate']),
    };
}

export function AuthorityToJSON(value?: Authority): any {
    if (value === undefined) {
        return undefined;
    }
    return {
        'username': value.username,
        'authority': value.authority,
        'userId': value.userId,
        'id': value.id,
        'ownerId': value.ownerId,
        'createdDate': value.createdDate === undefined ? undefined : value.createdDate.toISOString(),
        'modifiedDate': value.modifiedDate === undefined ? undefined : value.modifiedDate.toISOString(),
    };
}


